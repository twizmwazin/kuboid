#!/bin/bash -eu
# dumps a config from a secret
# based almost fully on: https://gist.github.com/so0k/8fad3b1639b3d70cd841703fda67f16b

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

function usage
{
	echo "Usage: $0 [ -s SECRET ] [ -N ] [ -o FILENAME ] NAMESPACE"
	echo "Detailed options:"
	echo "	-s	The kubernetes secret to use as the authentication token (from kubectl get secrets)"
	echo "	-o	The output filename."
	echo "	-N	Do not configure an NFS volume."
	echo ""
	echo "You MUST enter a namespace. To use the default namespace, explicitly specify 'default'"
	exit 1
}

while getopts "s:o:N" OPT
do
        case $OPT in
                s)
                	secret=$OPTARG
                	;;
                N)
                	nonfs=1
                	;;
                o)
                	output=$OPTARG
                	;;
                *)
                	usage
                	exit 1
                	;;
        esac
done

shift $(($OPTIND-1))
namespace=${1-}

if [ -z "$namespace" ]
then
	usage
	exit 1
fi

nonfs="${nonfs-0}"
output="${output-kubeconfig-$namespace}"
secret="${secret-$(kubectl get secrets | grep default | awk '{print $1}')}"

echo "[*] secret = ${secret}"
echo "[*] namespace = ${namespace}"
echo "[*] output file = ${output}"


kubectl get secret ${secret} -o json | jq -r '.data["ca.crt"]' | base64 -d > /tmp/ca.crt
user_token=$(kubectl get secret ${secret} -o json | jq -r '.data["token"]' | base64 -d)
echo "[*] token = ${user_token}"

context=`kubectl config current-context`
echo "[*] context = $context"

cluster_name=`kubectl config get-contexts $context | awk '{print $3}' | tail -n 1`
echo "[*] cluster_name= ${cluster_name}"

endpoint=`kubectl config view -o jsonpath="{.clusters[?(@.name == \"${cluster_name}\")].cluster.server}"`
echo "[*] endpoint = ${endpoint}"

echo "[*] preparing $output"
KUBECONFIG=$output kubectl config set-context ${cluster_name#cluster-} --namespace=$namespace
KUBECONFIG=$output kubectl config set-cluster ${cluster_name} --embed-certs=true --server=${endpoint} --certificate-authority=/tmp/ca.crt
KUBECONFIG=$output kubectl config set-credentials ${cluster_name#cluster-} --token=${user_token}
KUBECONFIG=$output kubectl config set-context ${cluster_name#cluster-} --cluster=${cluster_name} --user=${cluster_name#cluster-}
KUBECONFIG=$output kubectl config use-context ${cluster_name#cluster-}

if [ "$namespace" != "default" ]
then
	cat <<END | kubectl create -f - || echo "Namespace already exists."
apiVersion: v1
kind: Namespace
metadata:
  name: $namespace
  labels:
    name: $namespace
END
fi

if [ "$nonfs" -ne 1 ]
then
	echo "[*] configuring NFS volumes"
	$SCRIPT_DIR/configure_nfs_volume -n $namespace
fi

echo "[*] done! Test with: "
echo "> KUBECONFIG=$output pod_names"
